name: Test and Coverage Validation with SonarCloud

on:
  pull_request:
    paths:
      - '**/*.go'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        go mod tidy
        go mod vendor

    - name: Run Tests with Coverage
      run: |
        go test -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    - name: Set up Java 17 (Required for SonarCloud)
      uses: actions/setup-java@v3
      with:
        java-version: '17'  # Ensure Java 17 is installed
        distribution: 'temurin'  # You can use 'adoptopenjdk' or 'temurin'

    - name: Prepare SonarCloud analysis
      run: |
        mkdir -p .sonar
        echo "sonar.projectKey=gomesmatheus_tc-cliente" > .sonar/sonar-project.properties
        echo "sonar.projectName=gomesmatheus_tc-cliente" >> .sonar/sonar-project.properties
        echo "sonar.projectVersion=1.0" >> .sonar/sonar-project.properties
        echo "sonar.sources=." >> .sonar/sonar-project.properties
        echo "sonar.tests=." >> .sonar/sonar-project.properties
        echo "sonar.go.coverageReportPaths=coverage.out" >> .sonar/sonar-project.properties
        echo "sonar.language=go" >> .sonar/sonar-project.properties
        echo "sonar.host.url=https://sonarcloud.io" >> .sonar/sonar-project.properties  # Correct URL

    - name: Set up SonarCloud (with token)
      uses: sonarsource/sonarcloud-github-action@v1
      with:
        entryPoint: "sonar-scanner"
        args: "-Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.host.url=https://sonarcloud.io"

    - name: Run SonarCloud Analysis
      run: |
        sonar-scanner

    - name: Check Coverage
      run: |
        COVERAGE_PERCENTAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        REQUIRED_COVERAGE=80  # Set the required coverage percentage

        echo "Coverage: $COVERAGE_PERCENTAGE%"

        if (( $(echo "$COVERAGE_PERCENTAGE < $REQUIRED_COVERAGE" | bc -l) )); then
          echo "Error: Test coverage is below $REQUIRED_COVERAGE% (current: $COVERAGE_PERCENTAGE%)"
          exit 1
        fi
